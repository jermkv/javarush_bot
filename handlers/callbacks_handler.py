from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from handlers.quiz_manager import get_score
from keyboards.inline import fact_again_keyboard, topic_keyboard
from services.quiz_service import get_quiz_question
from services.random_fact import get_fact
from storage import dialogues, PERSONS
from states import MessageTalks, QuizStates


router = Router()


@router.callback_query(F.data == 'feeling_bot')
async def feel_handler(call: CallbackQuery):
    await call.answer()
    await call.message.answer('–ü—Ä–∏–≤–µ—Ç')


@router.callback_query(F.data == 'text_send')
async def text_handler(call: CallbackQuery):
    await call.answer()
    await call.message.answer('–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')


@router.callback_query(F.data == 'random_fact')
async def random_handler(call: CallbackQuery):
    await call.answer('–©–∞—Å –≤–µ—Ä–Ω—É —Ç–µ–±–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç', show_alert=True)
    fact = await get_fact()
    await call.message.answer(f'{fact}', reply_markup=fact_again_keyboard())



@router.callback_query(F.data.startswith('persona:'))
async def persona_handler(call: CallbackQuery, state: FSMContext):
    persona = call.data.split(':')[-1]

    #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
    dialogues[call.from_user.id] = {
        'persona': PERSONS[persona],
        'messages': []
    }
    print(dialogues)
    await call.message.answer(f'–¢—ã –≤—ã–±—Ä–∞–ª {persona}. –ú–æ–∂–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –Ω–∏–º')
    await state.set_state(MessageTalks.message)


@router.callback_query(F.data == 'close_mode')
async def close_mode_handler(call: CallbackQuery, state: FSMContext):
    await state.clear()


@router.callback_query(F.data.startswith('topic:'))
async def close_mode_handler(call: CallbackQuery, state: FSMContext):
    await call.answer('–°–µ–π—á–∞—Å –∑–∞–¥–∞–º –≤–æ–ø—Ä–æ—Å', show_alert=True)
    topic = call.data.split(':')[-1]
    question = await get_quiz_question(topic)
    await state.update_data(question=question)
    await state.update_data(topic=topic)
    await state.set_state(QuizStates.waiting_answer)
    await call.message.answer(f'–¢–µ–º–∞: {topic}\n\n{question}\n–ú–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å.')


@router.callback_query(F.data == 'next_question')
async def next_quiz_qestion_handler(call: CallbackQuery, state: FSMContext):
    await call.answer('–°–µ–π—á–∞—Å –∑–∞–¥–∞–º –≤–æ–ø—Ä–æ—Å', show_alert=True)
    data = await state.get_data()
    topic = data.get('topic')
    question = await get_quiz_question(topic)
    await call.message.answer(f'–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ —Ç–µ–º–µ: {topic}\n\n{question}')
    await state.set_state(QuizStates.waiting_answer)


@router.callback_query(F.data == 'change_topic')
async def next_quiz_question_handler(call: CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —Ç–µ–º—É', reply_markup=topic_keyboard())


@router.callback_query(F.data == 'end_quiz')
async def next_quiz_qestion_handler(call: CallbackQuery, state: FSMContext):
    score = await get_score(state)
    await state.clear()
    await call.message.answer(f'üé¨ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –¢–≤–π–æ –∏—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: {score}')